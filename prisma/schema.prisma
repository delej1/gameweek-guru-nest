generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int             @id @default(autoincrement()) // Primary Key
  username      String          @db.VarChar(50) // User's username
  email         String          @unique @db.VarChar(100) // User's email
  password      String          @db.VarChar(255) // Hashed password
  phoneNumber   String          @db.VarChar(15) // User's phone number
  fcmToken      String          @default("") @db.VarChar(255) // FCM token, default empty string
  createdAt     DateTime        @default(now()) // Account creation timestamp
  updatedAt     DateTime        @updatedAt // Last account update timestamp
  subscriptions Subscriptions[] // One-to-many relationship with Subscriptions
}

model Subscriptions {
  id        Int      @id @default(autoincrement()) // Primary Key
  userId    Int // Foreign Key to User
  user      Users    @relation(fields: [userId], references: [id]) // User relation
  planName  String   @db.VarChar(50) // Subscription plan name
  status    String   @db.VarChar(20) // Subscription status (active, canceled)
  startDate DateTime // Subscription start date
  endDate   DateTime // Subscription end date
}

model Players {
  id                       Int                 @id @default(autoincrement()) // Primary Key
  fpl_id                   Int                 @unique // Player ID from the FPL API
  name                     String              @db.VarChar(100) // Player's name
  teamId                   Int // Foreign Key to Team
  team                     Teams               @relation(fields: [teamId], references: [id]) // Team relation
  position                 Int // Playerâ€™s position (1 = GK, 2 = DEF)
  totalPoints              Int // Total points scored in the season
  form                     Decimal             @db.Decimal(5, 2) // Current form
  minutes                  Int // Total minutes played
  goalsScored              Int // Goals scored
  assists                  Int // Assists
  cleanSheets              Int // Clean sheets
  expectedGoals            Decimal             @db.Decimal(5, 2) // Expected Goals (xG)
  expectedAssists          Decimal             @db.Decimal(5, 2) // Expected Assists (xA)
  influence                Decimal             @db.Decimal(5, 2) // Influence
  creativity               Decimal             @db.Decimal(5, 2) // Creativity
  threat                   Decimal             @db.Decimal(5, 2)
  ictIndex                 Decimal             @db.Decimal(5, 2) // ICT Index (Influence, Creativity, Threat)
  status                   String              @db.VarChar(50) // Player availability status
  chanceOfPlayingNextRound Int // Chance of playing next round (%)
  predictions              PlayerPredictions[] // One-to-many relationship with PlayerPredictions
}

model Teams {
  id              Int        @id @default(autoincrement()) // Primary Key
  fpl_id          Int        @unique // Team ID from the FPL API
  name            String     @db.VarChar(100) // Team name
  strengthAttack  Int // Team attacking strength
  strengthDefense Int // Team defensive strength
  strengthOverall Int // Overall team strength
  players         Players[] // One-to-many relationship with Players
  homeFixtures    Fixtures[] @relation("HomeTeam")
  awayFixtures    Fixtures[] @relation("AwayTeam")
}

model Fixtures {
  id                Int                 @id @default(autoincrement()) // Primary Key
  fpl_id            Int                 @unique // Fixture ID from the FPL API
  gameweek          Int // Gameweek number
  homeTeamId        Int // Foreign Key to Team (home)
  awayTeamId        Int // Foreign Key to Team (away)
  homeTeam          Teams               @relation("HomeTeam", fields: [homeTeamId], references: [id]) // Home team relation
  awayTeam          Teams               @relation("AwayTeam", fields: [awayTeamId], references: [id]) // Away team relation
  date              DateTime // Fixture date
  difficultyHome    Int // Difficulty rating for the home team
  difficultyAway    Int // Difficulty rating for the away team
  matchPrediction   MatchPredictions? // One-to-one relationship with MatchPrediction
  playerPredictions PlayerPredictions[] // One-to-many relationship with PlayerPredictions
}

model PlayerPredictions {
  id                   Int      @id @default(autoincrement()) // Primary Key
  playerId             Int      @unique // Foreign Key to Player
  player               Players  @relation(fields: [playerId], references: [id]) // Player relation
  fixtureId            Int      @unique // Foreign Key to Fixture
  fixture              Fixtures @relation(fields: [fixtureId], references: [id]) // Fixture relation
  predictedPoints      Decimal  @db.Decimal(5, 2) // AI-predicted points for the player
  predictedGoals       Decimal  @db.Decimal(5, 2) // AI-predicted goals
  predictedAssists     Decimal  @db.Decimal(5, 2) // AI-predicted assists
  predictionConfidence Decimal  @db.Decimal(5, 2) // Confidence score for the prediction
  aiReasoning          String   @db.Text // Store AI reasoning behind the prediction
  createdAt            DateTime @default(now()) // Timestamp for when the prediction was made
}

model MatchPredictions {
  id                 Int      @id @default(autoincrement()) // Primary Key
  fixtureId          Int      @unique // Foreign Key to Fixture
  fixture            Fixtures @relation(fields: [fixtureId], references: [id]) // Fixture relation
  confidenceHomeWin  Decimal  @db.Decimal(5, 2) // Probability of a home win
  confidenceAwayWin  Decimal  @db.Decimal(5, 2) // Probability of an away win
  confidenceDraw     Decimal  @db.Decimal(5, 2) // Probability of a draw
  predictedHomeGoals Decimal  @db.Decimal(5, 2) // AI-predicted goals for the home team
  predictedAwayGoals Decimal  @db.Decimal(5, 2) // AI-predicted goals for the away team
  aiReasoning        String   @db.Text // Store AI reasoning behind the prediction
  createdAt          DateTime @default(now()) // Timestamp for when the prediction was made
}